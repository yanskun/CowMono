//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub first_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub last_name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::groups_users::Entity")]
    GroupsUsers,
    #[sea_orm(has_many = "super::items::Entity")]
    Items,
    #[sea_orm(has_one = "super::settings::Entity")]
    Settings,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::Id",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SelfRef,
}

impl Related<super::groups_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsUsers.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl Related<super::settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Settings.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
